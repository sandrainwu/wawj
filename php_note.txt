1\输入验证 $inout=$input::all();$ruls=['password'=>'required|between:6,20|confirmed';$message=['password.required'=>'密码不能为空'，'password.between'=>'密码6-20位之间','password.confirmed'=>'新旧密码不一致'];$valoidator=Validator::make($input,$rule,$message); if(!$valoidator->pass()){ rebturn back()->withErrors($validator)  }     25教程

2\  csrf :  {{ csrf_field() }} 或  @csrf 或 <input type="hidden" name="_token" value="{{ csrf_token() }}">

3、伪造put delete方法：<input type="hidden" name="_method" value="PUT"> 或 {{ method_field('PUT') }}

4、php artisan make:controller PostController --resource 构造资源控制器 Route::resource('posts', 'PostController');

5、if ($request->has(['name', 'email'])) 这种情况下，只有当参数都存在时，才会返回 true

6、如果你想要判断参数存在且参数值不为空，可以使用 filled 方法：if ($request->filled('name')) {

7、表单提交后，验证不通过，你就可以使用辅助函数 back 返回到前一个 URL（由于该功能使用了 Session，使用该方法之前确保相关路由位于 web 中间件组或者应用了 Session 中间件）：

Route::post('user/profile', function () {
    // 验证请求...
    return back()->withInput();
});

8、默认情况下，Blade 的 {{ }} 语句已经通过 PHP 的 htmlentities 函数处理以避免 XSS 攻击，如果你不想要数据被处理，比如要输出带 HTML 元素的富文本，可以使用如下语法：Hello, {!! $name !!}.

9、@auth 和 @guest 指令可用于快速判断当前用户是否登录：
@auth
    // 用户已登录...
@endauth

@guest
    // 用户未登录...
@endguest

如果需要的话，你也可以在使用 @auth 和 @guest 的时候指定登录用户类型：

@auth('admin')
    // The user is authenticated...
@endauth

@guest('admin')
    // The user is not authenticated...
@endguest

10、如果包含的视图取决于一个给定的布尔条件，可以使用 @includeWhen 指令：

11、Route::get('/post/{post}', function () {
    //
})->name('post.show');

要生成指向该路由的 URL，可以这样使用 route 辅助函数：

echo route('post.show', ['post' => 1]);

// 输出 http://example.com/post/1

12、你可以通过重写 messages 方法自定义表单请求使用的错误消息，该方法应该返回属性/规则对数组及其对应错误消息：

13、first();echo $user->name;
get();foreach ($users as $user) {
    echo $user->name;
}

14\$result = Model::where(...)->get();
//不为空则if (!$result->isEmpty()) { }       if ($result->count()) { }

15\ DB::table('message')->where(['id'=>$message_id])->update(['replyed'=>1]);

















